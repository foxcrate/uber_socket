(function() {
  var BaseExtension, EventEmitter, Http, Queue, Request,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Request = require('./Request');

  Queue = require('./Queue');

  BaseExtension = require('./Extensions/BaseExtension');

  EventEmitter = require('events').EventEmitter;

  Http = (function(superClass) {
    extend(Http, superClass);

    Http.prototype.extensions = null;

    Http.prototype.queue = null;

    Http.prototype.historyApiSupported = null;

    Http.prototype.useQueue = true;

    Http.prototype.options = {
      type: 'GET',
      jsonPrefix: null,
      parallel: true
    };

    function Http() {
      Http.__super__.constructor.apply(this, arguments);
      this.extensions = {};
      this.queue = new Queue;
      this.on('send', (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return _this.callExtensions('send', args);
        };
      })(this));
      this.on('afterSend', (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return _this.callExtensions('afterSend', args);
        };
      })(this));
      this.on('complete', (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return _this.callExtensions('complete', args);
        };
      })(this));
      this.on('error', (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return _this.callExtensions('error', args);
        };
      })(this));
      this.on('success', (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return _this.callExtensions('success', args);
        };
      })(this));
    }

    Http.prototype.createRequest = function(url, type, data, jsonp, jsonPrefix) {
      return new Request(url, type, data, jsonp, jsonPrefix);
    };

    Http.prototype.request = function(url, optionsOrFn, fn) {
      var args, options, ref, request;
      if (optionsOrFn == null) {
        optionsOrFn = {};
      }
      if (fn == null) {
        fn = null;
      }
      args = this._optimizeArguments(url, optionsOrFn, fn);
      url = args.url;
      options = args.options;
      fn = args.fn;
      if (typeof options.type === 'undefined') {
        options.type = this.options.type;
      }
      if (typeof options.data === 'undefined') {
        options.data = null;
      }
      if (typeof options.jsonp === 'undefined') {
        options.jsonp = false;
      }
      if (typeof options.jsonPrefix === 'undefined') {
        options.jsonPrefix = this.options.jsonPrefix;
      }
      if (typeof options.parallel === 'undefined') {
        options.parallel = this.options.parallel;
      }
      request = this.createRequest(url, options.type, options.data, options.jsonp, options.jsonPrefix);
      request.on('send', (function(_this) {
        return function(response, request) {
          return _this.emit('send', response, request);
        };
      })(this));
      request.on('afterSend', (function(_this) {
        return function(response, request) {
          return _this.emit('afterSend', response, request);
        };
      })(this));
      request.on('success', (function(_this) {
        return function(response, request) {
          return _this.emit('success', response, request);
        };
      })(this));
      request.on('error', (function(_this) {
        return function(error, response, request) {
          return _this.emit('error', error, response, request);
        };
      })(this));
      request.on('complete', (function(_this) {
        return function(err, response, request) {
          return _this.emit('complete', err, response, request);
        };
      })(this));
      if (this.useQueue && (((ref = options.type) === 'PUT' || ref === 'POST' || ref === 'DELETE') || options.parallel === false || this.queue.hasWritableRequests())) {
        return this.queue.addAndSend(request, fn);
      } else {
        return request.send(fn);
      }
    };

    Http.prototype.get = function(url, optionsOrFn, fn) {
      var args;
      if (optionsOrFn == null) {
        optionsOrFn = {};
      }
      if (fn == null) {
        fn = null;
      }
      args = this._optimizeArguments(url, optionsOrFn, fn);
      args.options.type = 'GET';
      return this.request(args.url, args.options, args.fn);
    };

    Http.prototype.post = function(url, optionsOrFn, fn) {
      var args;
      if (optionsOrFn == null) {
        optionsOrFn = {};
      }
      if (fn == null) {
        fn = null;
      }
      args = this._optimizeArguments(url, optionsOrFn, fn);
      args.options.type = 'POST';
      return this.request(args.url, args.options, args.fn);
    };

    Http.prototype.put = function(url, optionsOrFn, fn) {
      var args;
      if (optionsOrFn == null) {
        optionsOrFn = {};
      }
      if (fn == null) {
        fn = null;
      }
      args = this._optimizeArguments(url, optionsOrFn, fn);
      args.options.type = 'PUT';
      return this.request(args.url, args.options, args.fn);
    };

    Http.prototype["delete"] = function(url, optionsOrFn, fn) {
      var args;
      if (optionsOrFn == null) {
        optionsOrFn = {};
      }
      if (fn == null) {
        fn = null;
      }
      args = this._optimizeArguments(url, optionsOrFn, fn);
      args.options.type = 'DELETE';
      return this.request(args.url, args.options, args.fn);
    };

    Http.prototype.getJson = function(url, optionsOrFn, fn) {
      var args;
      if (optionsOrFn == null) {
        optionsOrFn = {};
      }
      if (fn == null) {
        fn = null;
      }
      args = this._optimizeArguments(url, optionsOrFn, fn);
      return this.request(args.url, args.options, function(response, err) {
        if (!err && typeof response.data === 'string') {
          response.data = JSON.parse(response.data);
        }
        return fn(response, err);
      });
    };

    Http.prototype.postJson = function(url, optionsOrFn, fn) {
      var args;
      if (optionsOrFn == null) {
        optionsOrFn = {};
      }
      if (fn == null) {
        fn = null;
      }
      args = this._optimizeArguments(url, optionsOrFn, fn);
      args.options.type = 'POST';
      return this.request(args.url, args.options, function(response, err) {
        if (!err && typeof response.data === 'string') {
          response.data = JSON.parse(response.data);
        }
        return fn(response, err);
      });
    };

    Http.prototype.jsonp = function(url, optionsOrFn, fn) {
      var args;
      if (optionsOrFn == null) {
        optionsOrFn = {};
      }
      if (fn == null) {
        fn = null;
      }
      args = this._optimizeArguments(url, optionsOrFn, fn);
      if (typeof args.options.jsonp === 'undefined') {
        args.options.jsonp = true;
      }
      return this.get(args.url, args.options, args.fn);
    };

    Http.prototype.isHistoryApiSupported = function() {
      if (this.historyApiSupported) {
        this.historyApiSupported = window.history && window.history.pushState && window.history.replaceState && !navigator.userAgent.match(/((iPod|iPhone|iPad).+\bOS\s+[1-4]|WebApps\/.+CFNetwork)/);
      }
      return this.historyApiSupported;
    };

    Http.prototype.addExtension = function(name, extension) {
      if (extension instanceof BaseExtension) {
        extension.setHttp(this);
      }
      this.extensions[name] = extension;
      return this;
    };

    Http.prototype.removeExtension = function(name) {
      if (typeof this.extensions[name] === 'undefined') {
        throw new Error('Extension ' + name + ' does not exists');
      }
      delete this.extensions[name];
      return this;
    };

    Http.prototype.callExtensions = function(event, args) {
      var ext, name, ref, results;
      ref = this.extensions;
      results = [];
      for (name in ref) {
        ext = ref[name];
        if (typeof ext[event] !== 'undefined') {
          results.push(ext[event].apply(ext[event], args));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Http.prototype._optimizeArguments = function(url, optionsOrFn, fn) {
      var options;
      if (optionsOrFn == null) {
        optionsOrFn = {};
      }
      if (fn == null) {
        fn = null;
      }
      if (Object.prototype.toString.call(optionsOrFn) === '[object Function]') {
        fn = optionsOrFn;
        options = {};
      } else {
        options = optionsOrFn;
      }
      if (fn === null) {
        fn = function() {
          return {};
        };
      }
      return {
        url: url,
        options: options,
        fn: fn
      };
    };

    return Http;

  })(EventEmitter);

  module.exports = Http;

}).call(this);
