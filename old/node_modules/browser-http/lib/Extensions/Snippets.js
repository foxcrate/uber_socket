(function() {
  var BaseExtension, Snippets, hasAttr,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseExtension = require('./BaseExtension');

  hasAttr = function(el, name) {
    var attr;
    attr = el.getAttribute(name);
    return attr !== null && typeof attr !== 'undefined' && attr !== false;
  };

  Snippets = (function(superClass) {
    extend(Snippets, superClass);

    function Snippets() {
      this.success = bind(this.success, this);
      return Snippets.__super__.constructor.apply(this, arguments);
    }

    Snippets.APPEND_ATTRIBUTE = 'data-append';

    Snippets.prototype.success = function(response) {
      var el, html, id, ref, results;
      if (typeof response.data.snippets !== 'undefined') {
        ref = response.data.snippets;
        results = [];
        for (id in ref) {
          html = ref[id];
          el = document.getElementById(id);
          if (hasAttr(el, Snippets.APPEND_ATTRIBUTE)) {
            results.push(this.appendSnippet(el, html));
          } else {
            results.push(this.updateSnippet(el, html));
          }
        }
        return results;
      }
    };

    Snippets.prototype.updateSnippet = function(el, html) {
      return el.innerHTML = html;
    };

    Snippets.prototype.appendSnippet = function(el, html) {
      return el.innerHTML += html;
    };

    return Snippets;

  })(BaseExtension);

  module.exports = Snippets;

}).call(this);
