(function() {
  var $, BaseExtension, Links, hasAttr,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseExtension = require('./BaseExtension');

  $ = null;

  hasAttr = function(el, name) {
    var attr;
    attr = $(el).attr(name);
    return typeof attr !== 'undefined' && attr !== false;
  };

  Links = (function(superClass) {
    extend(Links, superClass);

    Links.HISTORY_API_ATTRIBUTE = 'data-history-api';

    Links.EVENT_NAMESPACE = 'http-ext-links';

    function Links(jQuery) {
      $ = jQuery;
      $(document).on('click.' + Links.EVENT_NAMESPACE, 'a.ajax:not(.not-ajax)', (function(_this) {
        return function(e) {
          var a, link, type;
          e.preventDefault();
          if (_this.http === null) {
            throw new Error('Please add Links extension into http object with addExtension method.');
          }
          a = e.target.nodeName.toLowerCase() === 'a' ? $(e.target) : $(e.target).closest('a');
          link = a.attr('href');
          type = hasAttr(a, 'data-type') ? a.attr('data-type').toUpperCase() : 'GET';
          if (_this.http.isHistoryApiSupported() && hasAttr(a, Links.HISTORY_API_ATTRIBUTE)) {
            window.history.pushState({}, null, link);
          }
          return _this.http.request(link, {
            type: type
          });
        };
      })(this));
    }

    Links.prototype.detach = function() {
      return $(document).off('.' + Links.EVENT_NAMESPACE);
    };

    return Links;

  })(BaseExtension);

  module.exports = Links;

}).call(this);
