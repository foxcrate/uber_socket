(function() {
  var EventEmitter, FakePromise, Queue,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  FakePromise = require('./FakePromise');

  Queue = (function(superClass) {
    extend(Queue, superClass);

    Queue.prototype.requests = null;

    Queue.prototype.running = false;

    function Queue() {
      this.requests = [];
    }

    Queue.prototype.hasWritableRequests = function() {
      var i, len, ref, ref1, request;
      if (this.running) {
        ref = this.requests;
        for (i = 0, len = ref.length; i < len; i++) {
          request = ref[i];
          if ((ref1 = request.request.type) === 'PUT' || ref1 === 'POST' || ref1 === 'DELETE') {
            return true;
          }
        }
      }
      return false;
    };

    Queue.prototype.getCurrentRequest = function() {
      if (this.requests.length === 0) {
        return null;
      }
      return this.requests[0].request;
    };

    Queue.prototype.addAndSend = function(request, fn) {
      this.emit('add', request);
      this.requests.push({
        request: request,
        fn: fn
      });
      if (!this.running) {
        this.run();
      }
      return new FakePromise;
    };

    Queue.prototype.next = function() {
      this.requests.shift();
      if (this.requests.length > 0) {
        this.emit('next', this.requests[0].request);
        return this.run();
      } else {
        this.running = false;
        return this.emit('finish');
      }
    };

    Queue.prototype.run = function() {
      var data, fn, request;
      if (this.requests.length === 0) {
        throw new Error('No pending requests');
      }
      this.running = true;
      data = this.requests[0];
      request = data.request;
      fn = data.fn;
      this.emit('send', request);
      return request.send((function(_this) {
        return function(response, err) {
          fn(response, err);
          return _this.next();
        };
      })(this));
    };

    Queue.prototype.removePending = function() {
      var request;
      if (this.running) {
        request = this.requests[0];
        this.requests = [request];
      } else {
        this.requests = [];
      }
      return this;
    };

    Queue.prototype.stop = function() {
      if (this.running) {
        this.getCurrentRequest().abort();
      }
      this.requests = [];
      return this;
    };

    return Queue;

  })(EventEmitter);

  module.exports = Queue;

}).call(this);
