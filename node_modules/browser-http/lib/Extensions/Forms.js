(function() {
  var $, BaseExtension, Forms,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseExtension = require('./BaseExtension');

  $ = null;

  Forms = (function(superClass) {
    extend(Forms, superClass);

    Forms.EVENTS_NAMESPACE = 'http-ext-forms';

    function Forms(jQuery) {
      this.onFormSubmitted = bind(this.onFormSubmitted, this);
      $ = jQuery;
      $(document).on('submit.' + Forms.EVENTS_NAMESPACE, 'form.ajax:not(.not-ajax)', this.onFormSubmitted);
      $(document).on('click.' + Forms.EVENTS_NAMESPACE, 'form.ajax:not(.not-ajax) input[type="submit"]', this.onFormSubmitted);
      $(document).on('click.' + Forms.EVENTS_NAMESPACE, 'form input[type="submit"].ajax', this.onFormSubmitted);
    }

    Forms.prototype.onFormSubmitted = function(e) {
      var action, el, form, i, j, len, name, options, sendValues, val, value, values;
      e.preventDefault();
      if (this.http === null) {
        throw new Error('Please add Forms extension into http object with addExtension method.');
      }
      el = $(e.target);
      sendValues = {};
      if (el.is(':submit')) {
        form = el.closest('form');
        sendValues[el.attr('name')] = el.val() || '';
      } else if (el.is('form')) {
        form = el;
      } else {
        return null;
      }
      if (form.get(0).onsubmit && form.get(0).onsubmit() === false) {
        return null;
      }
      values = form.serializeArray();
      for (i = j = 0, len = values.length; j < len; i = ++j) {
        value = values[i];
        name = value.name;
        if (typeof sendValues[name] === 'undefined') {
          sendValues[name] = value.value;
        } else {
          val = sendValues[name];
          if (Object.prototype.toString.call(val) !== '[object Array]') {
            val = [val];
          }
          val.push(value.value);
          sendValues[name] = val;
        }
      }
      options = {
        data: sendValues,
        type: form.attr('method') || 'GET'
      };
      action = form.attr('action') || window.location.href;
      return this.http.request(action, options);
    };

    Forms.prototype.detach = function() {
      return $(document).off('.' + Forms.EVENTS_NAMESPACE);
    };

    return Forms;

  })(BaseExtension);

  module.exports = Forms;

}).call(this);
