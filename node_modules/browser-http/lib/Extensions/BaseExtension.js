(function() {
  var BaseExtension, EventEmitter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  BaseExtension = (function(superClass) {
    extend(BaseExtension, superClass);

    function BaseExtension() {
      return BaseExtension.__super__.constructor.apply(this, arguments);
    }

    BaseExtension.prototype.http = null;

    BaseExtension.prototype.setHttp = function(http) {
      this.http = http;
      return this.emit('httpReady', this.http);
    };

    return BaseExtension;

  })(EventEmitter);

  module.exports = BaseExtension;

}).call(this);
