(function() {
  var BaseExtension, Offline,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseExtension = require('./BaseExtension');

  Offline = (function(superClass) {
    extend(Offline, superClass);

    Offline.HTTP_TYPE = 'HEAD';

    Offline.prototype.timer = null;

    Offline.prototype.offline = false;

    function Offline(url, timeout) {
      if (url == null) {
        url = 'favicon.ico';
      }
      if (timeout == null) {
        timeout = 5000;
      }
      this.start(url, timeout);
    }

    Offline.prototype.start = function(url, timeout) {
      if (url == null) {
        url = 'favicon.ico';
      }
      if (timeout == null) {
        timeout = 5000;
      }
      return this.timer = window.setInterval((function(_this) {
        return function() {
          var options;
          if (_this.http === null) {
            throw new Error('Please add Offline extension into http object with addExtension method.');
          }
          options = {
            type: Offline.HTTP_TYPE,
            data: {
              r: Math.floor(Math.random() * 1000000000)
            }
          };
          return _this.http.request(url, options, function(response, err) {
            if (err) {
              if (!_this.offline) {
                _this.offline = true;
                return _this.http.emit('disconnected');
              }
            } else {
              if ((response.status >= 200 && response.status <= 300) || response.status === 304) {
                if (_this.offline) {
                  _this.offline = false;
                  return _this.http.emit('connected');
                }
              } else if (!_this.offline) {
                _this.offline = true;
                return _this.http.emit('disconnected');
              }
            }
          });
        };
      })(this), timeout);
    };

    Offline.prototype.stop = function() {
      if (this.timer !== null) {
        window.clearInterval(this.timer);
        this.timer = null;
      }
      return this;
    };

    return Offline;

  })(BaseExtension);

  module.exports = Offline;

}).call(this);
