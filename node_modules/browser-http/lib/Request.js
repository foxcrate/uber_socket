(function() {
  var EventEmitter, Request, Xhr,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Xhr = require('./Xhr');

  EventEmitter = require('events').EventEmitter;

  Request = (function(superClass) {
    extend(Request, superClass);

    Request.prototype.url = null;

    Request.prototype.type = 'GET';

    Request.prototype.data = null;

    Request.prototype.jsonp = null;

    Request.prototype.xhr = null;

    Request.prototype.response = null;

    Request.prototype.jsonPrefix = null;

    Request.prototype.aborted = false;

    function Request(url1, type1, data1, jsonp1, jsonPrefix1) {
      var ref;
      this.url = url1;
      this.type = type1 != null ? type1 : 'GET';
      this.data = data1 != null ? data1 : null;
      this.jsonp = jsonp1 != null ? jsonp1 : false;
      this.jsonPrefix = jsonPrefix1 != null ? jsonPrefix1 : null;
      Request.__super__.constructor.apply(this, arguments);
      this.type = this.type.toUpperCase();
      if ((ref = this.type) !== 'GET' && ref !== 'POST' && ref !== 'PUT' && ref !== 'DELETE' && ref !== 'HEAD' && ref !== 'CONNECT' && ref !== 'OPTIONS' && ref !== 'TRACE') {
        throw new Error("Http request: type must be GET, POST, PUT, DELETE, HEAD, CONNECT, OPTIONS or TRACE, " + this.type + " given");
      }
      this.xhr = this.createXhr(this.url, this.type, this.data, this.jsonp, this.jsonPrefix);
      this.response = this.xhr.response;
      this.xhr.on('send', (function(_this) {
        return function(response) {
          return _this.emit('send', response, _this);
        };
      })(this));
      this.xhr.on('afterSend', (function(_this) {
        return function(response) {
          return _this.emit('afterSend', response, _this);
        };
      })(this));
      this.xhr.on('success', (function(_this) {
        return function(response) {
          return _this.emit('success', response, _this);
        };
      })(this));
      this.xhr.on('error', (function(_this) {
        return function(err, response) {
          return _this.emit('error', err, response, _this);
        };
      })(this));
      this.xhr.on('complete', (function(_this) {
        return function(err, response) {
          return _this.emit('complete', err, response, _this);
        };
      })(this));
      this.xhr.on('abort', (function(_this) {
        return function(response) {
          return _this.emit('abort', response);
        };
      })(this));
    }

    Request.prototype.createXhr = function(url, type, data, jsonp, jsonPrefix) {
      return new Xhr(url, type, data, jsonp, jsonPrefix);
    };

    Request.prototype.setHeader = function(name, value) {
      return this.xhr.setHeader(name, value);
    };

    Request.prototype.send = function(fn) {
      return this.xhr.send(fn);
    };

    Request.prototype.abort = function() {
      return this.xhr.abort();
    };

    Request.prototype.getHeaders = function() {
      return this.xhr.getHeaders();
    };

    Request.prototype.getHeader = function(name) {
      return this.xhr.getHeader(name);
    };

    Request.prototype.setHeader = function(name, value) {
      return this.xhr.setHeader(name, value);
    };

    Request.prototype.setMimeType = function(mime) {
      return this.xhr.setMimeType(mime);
    };

    return Request;

  })(EventEmitter);

  module.exports = Request;

}).call(this);
